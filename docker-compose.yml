version: "3.9"

# -----------------------------------------------------------------------------
# Zero-trust local stack for Ollama:
# - Internal "backend" network is isolated from the internet.
# - Only the reverse proxy (nginx) is exposed to localhost.
# - mTLS (client certificates) + optional OIDC (oauth2-proxy).
# -----------------------------------------------------------------------------

services:
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    restart: unless-stopped
    # Bind only to the backend network; do NOT publish ports.
    networks:
      - backend
    expose:
      - "11434"
    environment:
      # Ollama binds to all interfaces inside the container;
      # we keep it unreachable from host by NOT mapping ports.
      OLLAMA_HOST: 0.0.0.0:11434
      # Restrict CORS to the proxy origin you expose (adjust to your hostname)
      OLLAMA_ORIGINS: "https://localhost"
    volumes:
      # Persistent encrypted model cache (encrypt the underlying disk/FS)
      - ollama-data:/root/.ollama:rw,noexec
      # Writable temp, but isolated
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 1073741824  # 1 GiB
    # Security hardening
    security_opt:
      - no-new-privileges:true
      # Uncomment and provide a local seccomp profile if desired:
      # - seccomp=/opt/seccomp/default.json
    cap_drop:
      - ALL
    read_only: true     # Container FS is read-only
    # Provide only the directories that must be writable via volumes/tmpfs.
    ulimits:
      nproc: 4096
      nofile: 65536
    # Resource guards (Compose supports these keys for local Docker)
    mem_limit: "16g"
    cpus: "8.0"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://127.0.0.1:11434"]
      interval: 30s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    container_name: oauth2-proxy
    restart: unless-stopped
    # Optional: enable if you want OIDC/OAuth2 SSO. If you only want mTLS,
    # you can comment this service and related NGINX config.
    networks:
      - backend
    environment:
      OAUTH2_PROXY_PROVIDER: "oidc"
      OAUTH2_PROXY_UPSTREAMS: "file:///dev/null"
      OAUTH2_PROXY_HTTP_ADDRESS: "0.0.0.0:4180"
      OAUTH2_PROXY_COOKIE_SECRET: "${OAUTH2_PROXY_COOKIE_SECRET}"
      OAUTH2_PROXY_COOKIE_SECURE: "true"
      OAUTH2_PROXY_COOKIE_SAMESITE: "lax"
      OAUTH2_PROXY_COOKIE_REFRESH: "1h"
      OAUTH2_PROXY_COOKIE_EXPIRE: "8h"
      OAUTH2_PROXY_REDIRECT_URL: "https://localhost/oauth2/callback"
      OAUTH2_PROXY_EMAIL_DOMAINS: "*"
      OAUTH2_PROXY_WHITELIST_DOMAINS: "localhost"
      OAUTH2_PROXY_CLIENT_ID: "${OIDC_CLIENT_ID}"
      OAUTH2_PROXY_CLIENT_SECRET: "${OIDC_CLIENT_SECRET}"
      OAUTH2_PROXY_OIDC_ISSUER_URL: "${OIDC_ISSUER_URL}"
      OAUTH2_PROXY_SCOPE: "openid profile