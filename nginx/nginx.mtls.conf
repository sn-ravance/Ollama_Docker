worker_processes  1;
events { worker_connections  1024; }

http {
  # Basic rate limiting
  limit_req_zone $binary_remote_addr zone=rl_zone:10m rate=10r/s;
  limit_conn_zone $binary_remote_addr zone=conn_zone:10m;

  # Upstream to Ollama only (no oauth2-proxy in mTLS-only mode)
  upstream ollama_upstream {
    server ollama:11434;
    keepalive 32;
  }

  server {
    listen 4443 ssl http2;
    server_name localhost;

    # Server certs
    ssl_certificate     /etc/nginx/tls/server.crt;
    ssl_certificate_key /etc/nginx/tls/server.key;

    # mTLS - prefer client cert, but allow healthz without it
    ssl_client_certificate /etc/nginx/tls/ca.crt;
    ssl_verify_client optional;     # enforce per-location below
    ssl_verify_depth 2;

    # Modern TLS
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers   HIGH:!aNULL:!MD5:!3DES;
    ssl_prefer_server_ciphers on;
    # Note: TLSv1.3 cipher suites are not configured via ssl_ciphers.
    # NGINX/OpenSSL will use sane defaults for TLSv1.3.

    # Security headers
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options DENY always;
    add_header Referrer-Policy no-referrer always;
    add_header Content-Security-Policy "default-src 'none'; connect-src 'self'; img-src 'self' data:; style-src 'self' 'unsafe-inline';" always;

    # Health check (no client cert required)
    location = /healthz {
      return 200;
    }

    # API access (mTLS-only)
    location /api/ {
      # Enforce mTLS for API requests
      if ($ssl_client_verify != SUCCESS) { return 401; }
      # Rate limits and connection caps
      limit_req zone=rl_zone burst=20 nodelay;
      limit_conn conn_zone 20;

      # Open CORS for local dev; tighten in prod
      add_header Access-Control-Allow-Origin "*" always;
      add_header Access-Control-Allow-Methods "GET,POST,OPTIONS" always;
      add_header Access-Control-Allow-Headers "Authorization,Content-Type" always;

      if ($request_method = OPTIONS) { return 204; }

      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto https;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      proxy_pass http://ollama_upstream;
    }
  }
}
