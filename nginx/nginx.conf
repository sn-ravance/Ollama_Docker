worker_processes  1;
events { worker_connections  1024; }

http {
  # Basic rate limiting
  limit_req_zone $binary_remote_addr zone=rl_zone:10m rate=10r/s;
  limit_conn_zone $binary_remote_addr zone=conn_zone:10m;

  # Upstreams
  upstream ollama_upstream {
    server ollama:11434;
    keepalive 32;
  }
  upstream oauth2_upstream {
    server oauth2-proxy:4180;
    keepalive 8;
  }

  # TLS settings
  server {
    listen 443 ssl http2;
    server_name localhost;

    # Server certs (replace with your real certs)
    ssl_certificate     /etc/nginx/tls/server.crt;
    ssl_certificate_key /etc/nginx/tls/server.key;

    # mTLS - require client cert signed by your CA
    ssl_client_certificate /etc/nginx/tls/ca.crt;
    ssl_verify_client on;           # set to 'optional' during testing
    ssl_verify_depth 2;

    # Modern TLS
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers   TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256;
    ssl_prefer_server_ciphers on;

    # Security headers
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options DENY always;
    add_header Referrer-Policy no-referrer always;
    add_header Content-Security-Policy "default-src 'none'; connect-src 'self'; img-src 'self' data:; style-src 'self' 'unsafe-inline';" always;

    # Health check
    location = /healthz { return 200; }

    # OAuth2 Proxy endpoints
    location /oauth2/ {
      proxy_pass http://oauth2_upstream;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto https;
    }

    # Require successful OAuth2 auth for API access
    location /api/ {
      # mTLS already enforced at connection level
      # Add OIDC gate (comment these lines if using mTLS-only)
      auth_request /oauth2/auth;

      # Pass some hints/headers
      auth_request_set $user $upstream_http_x_auth_request_user;
      auth_request_set $email $upstream_http_x_auth_request_email;
      proxy_set_header X-User $user;
      proxy_set_header X-Email $email;

      # Rate limits and connection caps
      limit_req zone=rl_zone burst=20 nodelay;
      limit_conn conn_zone 20;

      # CORS (tighten origin to match your client)
      add_header Access-Control-Allow-Origin "https://localhost" always;
      add_header Access-Control-Allow-Methods "GET,POST,OPTIONS" always;
      add_header Access-Control-Allow-Headers "Authorization,Content-Type" always;

      if ($request_method = OPTIONS) {
        return 204;
      }

      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto https;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      proxy_pass http://ollama_upstream;
    }

    # oauth2-proxy auth subrequest endpoint
    location = /oauth2/auth {
      internal;
      proxy_pass       http://oauth2_upstream/oauth2/auth;
      proxy_set_header Host $host;
      proxy_set_header X-Original-URI $request_uri;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto https;
    }
  }
}
