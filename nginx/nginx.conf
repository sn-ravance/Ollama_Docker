worker_processes  1;
events { worker_connections  1024; }

http {
  # Verbose error logging to aid troubleshooting (consider lowering in prod)
  error_log /var/log/nginx/error.log debug;
  # Basic rate limiting
  limit_req_zone $binary_remote_addr zone=rl_zone:10m rate=10r/s;
  limit_conn_zone $binary_remote_addr zone=conn_zone:10m;

  # Upstreams
  upstream ollama_upstream {
    server ollama:11434;
    keepalive 32;
  }
  upstream oauth2_upstream {
    server oauth2-proxy:4180;
    keepalive 8;
  }

  # TLS settings - OIDC portal on localhost
  server {
    listen 443 ssl http2;
    server_name localhost;

    # Server certs (replace with your real certs)
    ssl_certificate     /etc/nginx/tls/server.crt;
    ssl_certificate_key /etc/nginx/tls/server.key;

    # mTLS - prefer client cert at server level; enforce per-location
    ssl_client_certificate /etc/nginx/tls/ca.crt;
    ssl_verify_client optional;
    ssl_verify_depth 2;

    # Modern TLS
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers   HIGH:!aNULL:!MD5:!3DES;
    ssl_prefer_server_ciphers on;

    # Security headers
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options DENY always;
    add_header Referrer-Policy no-referrer always;
    add_header Content-Security-Policy "default-src 'none'; connect-src 'self'; img-src 'self' data:; style-src 'self' 'unsafe-inline';" always;

    # Health check (no client cert required)
    location = /healthz {
      return 200;
    }

    # mTLS debug: exposes whether a client cert was presented
    location = /mtls-info {
      add_header X-SSL-Client-Verify "$ssl_client_verify" always;
      add_header X-SSL-Client-Subject "$ssl_client_s_dn" always;
      add_header X-SSL-Client-Issuer "$ssl_client_i_dn" always;
      add_header Content-Type "text/plain";
      return 200 "ok\n";
    }

    # Friendly routes to avoid 404 after login and to verify auth status
    location = / {
      return 302 /me;
    }
    location = /login {
      return 302 https://$host/oauth2/start;
    }
    location = /logout {
      return 302 https://$host/oauth2/sign_out;
    }
    # Show current authenticated user's claims (from oauth2-proxy)
    location = /me {
      proxy_pass http://oauth2_upstream/oauth2/userinfo;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto https;
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      # Explicitly forward cookies to ensure session is seen upstream
      proxy_set_header Cookie $http_cookie;
      proxy_buffers 8 16k;
      proxy_buffer_size 32k;
      proxy_busy_buffers_size 64k;
      proxy_read_timeout 30s;
    }

    # OAuth2 Proxy endpoints
    location /oauth2/ {
      proxy_pass http://oauth2_upstream;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto https;
      # Handle large Set-Cookie headers from oauth2-proxy
      proxy_buffers 8 16k;
      proxy_buffer_size 32k;
      proxy_busy_buffers_size 64k;
      proxy_read_timeout 60s;
    }

    # OIDC-only API on localhost (no mTLS required)
    location /api/ {
      # Require authenticated OIDC session via oauth2-proxy
      auth_request /oauth2/auth;

      # Pass some hints/headers from oauth2-proxy
      auth_request_set $user $upstream_http_x_auth_request_user;
      auth_request_set $email $upstream_http_x_auth_request_email;
      proxy_set_header X-User $user;
      proxy_set_header X-Email $email;

      # Rate limits and connection caps
      limit_req zone=rl_zone burst=20 nodelay;
      limit_conn conn_zone 20;

      # CORS (tighten origin to match your client)
      add_header Access-Control-Allow-Origin "*" always;
      add_header Access-Control-Allow-Methods "GET,POST,OPTIONS" always;
      add_header Access-Control-Allow-Headers "Authorization,Content-Type" always;

      if ($request_method = OPTIONS) { return 204; }

      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto https;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_pass http://ollama_upstream;
    }

    # oauth2-proxy auth subrequest endpoint
    location = /oauth2/auth {
      internal;
      proxy_pass       http://oauth2_upstream/oauth2/auth;
      proxy_set_header Host $host;
      proxy_set_header X-Original-URI $request_uri;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto https;
      # Ensure auth subrequest can accept larger headers too
      proxy_buffers 8 16k;
      proxy_buffer_size 32k;
      proxy_busy_buffers_size 64k;
      proxy_read_timeout 30s;
    }
  }

  # TLS settings - mTLS-only API on api.localhost (no OIDC)
  server {
    listen 443 ssl http2;
    server_name api.localhost;

    # Server certs (must include SAN for api.localhost)
    ssl_certificate     /etc/nginx/tls/server.crt;
    ssl_certificate_key /etc/nginx/tls/server.key;

    # mTLS required at handshake for this vhost
    ssl_client_certificate /etc/nginx/tls/ca.crt;
    ssl_verify_client on;
    ssl_verify_depth 2;

    # Modern TLS
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers   HIGH:!aNULL:!MD5:!3DES;
    ssl_prefer_server_ciphers on;

    # Security headers
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options DENY always;
    add_header Referrer-Policy no-referrer always;
    add_header Content-Security-Policy "default-src 'none'; connect-src 'self'; img-src 'self' data:; style-src 'self' 'unsafe-inline';" always;

    # Health check
    location = /healthz { return 200; }

    # API access (require mTLS only; no OIDC on this host)
    location /api/ {
      # CORS (open for local dev)
      add_header Access-Control-Allow-Origin "*" always;
      add_header Access-Control-Allow-Methods "GET,POST,OPTIONS" always;
      add_header Access-Control-Allow-Headers "Authorization,Content-Type" always;
      if ($request_method = OPTIONS) { return 204; }

      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto https;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_pass http://ollama_upstream;
    }

    # OpenAI-compatible API proxy (/v1/*) â€” mTLS only
    location /v1/ {
      # CORS (open for local dev)
      add_header Access-Control-Allow-Origin "*" always;
      add_header Access-Control-Allow-Methods "GET,POST,OPTIONS" always;
      add_header Access-Control-Allow-Headers "Authorization,Content-Type" always;
      if ($request_method = OPTIONS) { return 204; }

      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto https;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_pass http://ollama_upstream;
    }

    # No oauth2-proxy endpoints on api.localhost
  }
}

