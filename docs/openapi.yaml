openapi: 3.0.3
info:
  title: Ollama ZTA Gateway API
  version: "1.0.0"
  description: |
    OpenAPI v3 for the mTLS-protected Ollama gateway exposed at https://api.localhost.

    Notes:
    - All requests require a valid client certificate trusted by the gateway CA.
    - Example curl usage supplies `--cert`, `--key`, and `--cacert`.
    - Responses are proxied from the upstream Ollama service.

servers:
  - url: https://api.localhost
    description: mTLS API vhost

components:
  securitySchemes:
    mtls:
      type: mutualTLS
  schemas:
    ModelTag:
      type: object
      properties:
        name:
          type: string
          example: mistral
        modified_at:
          type: string
          description: RFC3339 timestamp (may be provided by upstream)
    TagsResponse:
      type: object
      properties:
        models:
          type: array
          items:
            $ref: '#/components/schemas/ModelTag'
    PullRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
          example: mistral
    PullStatus:
      type: object
      additionalProperties: true
      example:
        status: pulling manifest
    GenerateRequest:
      type: object
      required: [model, prompt]
      properties:
        model:
          type: string
          example: mistral
        prompt:
          type: string
          example: Explain zero-trust in simple terms.
        stream:
          type: boolean
          description: If true, upstream may stream incremental tokens.
          default: false
        options:
          type: object
          description: Upstream model options (see Ollama docs).
    GenerateResponse:
      type: object
      additionalProperties: true
      example:
        model: mistral
        created_at: 2025-01-01T00:00:00Z
        response: Hello
        done: true

    # OpenAI-compatible schemas (minimal)
    OAIBasicModel:
      type: object
      properties:
        id: { type: string, example: mistral }
        object: { type: string, example: model }
        created: { type: integer, example: 1735689600 }
        owned_by: { type: string, example: system }
    OAIListModelsResponse:
      type: object
      properties:
        object: { type: string, example: list }
        data:
          type: array
          items: { $ref: '#/components/schemas/OAIBasicModel' }
    OAIChatMessage:
      type: object
      required: [role, content]
      properties:
        role: { type: string, enum: [system, user, assistant, tool] }
        content: { type: string }
    OAIChatCompletionsRequest:
      type: object
      required: [model, messages]
      properties:
        model: { type: string, example: mistral }
        messages:
          type: array
          items: { $ref: '#/components/schemas/OAIChatMessage' }
        stream:
          type: boolean
          default: false
    OAIChatChoice:
      type: object
      properties:
        index: { type: integer }
        message: { $ref: '#/components/schemas/OAIChatMessage' }
        finish_reason: { type: string, nullable: true }
    OAIChatCompletionsResponse:
      type: object
      properties:
        id: { type: string, example: chatcmpl-123 }
        object: { type: string, example: chat.completion }
        created: { type: integer, example: 1735689601 }
        model: { type: string, example: mistral }
        choices:
          type: array
          items: { $ref: '#/components/schemas/OAIChatChoice' }
        usage:
          type: object
          additionalProperties: true

security:
  - mtls: []

paths:
  /api/tags:
    get:
      summary: List available models
      description: Returns tags (models) available to the upstream Ollama runtime.
      security:
        - mtls: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsResponse'
              examples:
                example:
                  value:
                    models:
                      - name: mistral
                        modified_at: 2025-01-01T00:00:00Z
        '401':
          description: Client certificate missing or invalid

  # OpenAI-compatible endpoints on /v1/* (proxied to upstream by NGINX)
  /v1/models:
    get:
      summary: List models (OpenAI-compatible)
      description: Returns the available models in OpenAI-compatible shape.
      security:
        - mtls: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAIListModelsResponse'
              examples:
                example:
                  value:
                    object: list
                    data:
                      - id: mistral
                        object: model
                        created: 1735689600
                        owned_by: system
        '401':
          description: Client certificate missing or invalid
  /v1/chat/completions:
    post:
      summary: Chat completions (OpenAI-compatible)
      description: Creates a chat completion for the provided messages.
      security:
        - mtls: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAIChatCompletionsRequest'
            examples:
              simple:
                value:
                  model: mistral
                  messages:
                    - role: user
                      content: Explain zero-trust in simple terms.
      responses:
        '200':
          description: Chat completion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAIChatCompletionsResponse'
        '401':
          description: Client certificate missing or invalid
  /api/pull:
    post:
      summary: Pull a model from the registry
      description: Initiates a pull of the specified model (temporary egress required).
      security:
        - mtls: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PullRequest'
            examples:
              mistral:
                value:
                  name: mistral
      responses:
        '200':
          description: Status stream or final status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullStatus'
        '401':
          description: Client certificate missing or invalid
  /api/generate:
    post:
      summary: Generate text with a model
      description: Sends a prompt to the specified model and returns the response (may stream).
      security:
        - mtls: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateRequest'
            examples:
              simple:
                value:
                  model: mistral
                  prompt: Explain zero-trust in simple terms.
      responses:
        '200':
          description: Generated response (single or streaming chunks)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateResponse'
        '401':
          description: Client certificate missing or invalid
